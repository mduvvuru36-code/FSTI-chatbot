# -*- coding: utf-8 -*-
"""the uchiha's.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TxjydAv-u9I-7Cy9jCYAlZyGntPI_CR6
"""

# Personal Finance Chatbot - Google Colab Ready
!pip install -q transformers torch gradio accelerate

import torch
import gradio as gr
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
import warnings
warnings.filterwarnings("ignore")

MODEL_NAME = "ibm-granite/granite-3.1-2b-instruct"

class FinanceChatbot:
    def __init__(self):
        print("Loading Granite 3.1-2B-Instruct...")

        self.tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME, trust_remote_code=True)
        self.model = AutoModelForCausalLM.from_pretrained(
            MODEL_NAME,
            torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
            device_map="auto" if torch.cuda.is_available() else None,
            trust_remote_code=True
        )

        self.generator = pipeline(
            "text-generation",
            model=self.model,
            tokenizer=self.tokenizer,
            # Removed the device argument as accelerate handles device placement
            # device=0 if torch.cuda.is_available() else -1
        )

        self.context = """You are a Personal Finance Assistant specializing in savings, taxes, and investments.
        Provide practical, actionable advice with specific examples. Always remind users to consult certified financial advisors."""

        print("Finance Chatbot ready!")

    def get_advice(self, question, history, temperature):
        try:
            # Build context from chat history
            chat_context = ""
            for user_msg, bot_msg in history[-3:]:
                chat_context += f"User: {user_msg}\nBot: {bot_msg}\n"

            prompt = f"<|user|>\n{self.context}\n\nContext: {chat_context}\nUser: {question}\n<|assistant|>\n"

            response = self.generator(
                prompt,
                max_length=512,
                temperature=temperature,
                top_p=0.9,
                do_sample=True,
                pad_token_id=self.tokenizer.eos_token_id,
                return_full_text=False
            )[0]['generated_text'].strip()

            response += "\n\nüí° *Please consult a certified financial advisor for personalized advice.*"
            return response

        except Exception as e:
            return f"Error: {str(e)}"

# Initialize chatbot
bot = FinanceChatbot()

def chat_response(message, history, temperature):
    response = bot.get_advice(message, history, temperature)
    history.append((message, response))
    return "", history

def calculate_compound_interest(principal, rate, years):
    if principal <= 0 or rate < 0 or years <= 0:
        return "Please enter valid numbers."

    final_amount = principal * (1 + rate/100) ** years
    interest = final_amount - principal

    return f"""
üí∞ Investment Results:
‚Ä¢ Initial: ${principal:,.2f}
‚Ä¢ Final: ${final_amount:,.2f}
‚Ä¢ Interest Earned: ${interest:,.2f}
‚Ä¢ Total Return: {(interest/principal)*100:.1f}%
"""

def retirement_calculator(current_age, retirement_age, monthly_savings, annual_return):
    if current_age >= retirement_age:
        return "Current age must be less than retirement age."

    years = retirement_age - current_age
    months = years * 12
    monthly_rate = annual_return / 100 / 12

    if monthly_rate > 0:
        total = monthly_savings * (((1 + monthly_rate) ** months - 1) / monthly_rate)
    else:
        total = monthly_savings * months

    monthly_income = (total * 0.04) / 12  # 4% rule

    return f"""
üèñÔ∏è Retirement Projection:
‚Ä¢ Years to save: {years}
‚Ä¢ Total at retirement: ${total:,.2f}
‚Ä¢ Monthly retirement income: ${monthly_income:,.2f}
"""

# Gradio Interface
with gr.Blocks(title="Personal Finance Chatbot") as app:
    gr.Markdown("# üí∞ Personal Finance Chatbot\n### Expert advice on Savings, Taxes & Investments")

    with gr.Tab("üí¨ Chat Assistant"):
        with gr.Row():
            with gr.Column(scale=3):
                chatbot = gr.Chatbot(height=400)
                msg = gr.Textbox(placeholder="Ask about savings, investments, taxes...", show_label=False)
                with gr.Row():
                    send_btn = gr.Button("Send", variant="primary")
                    clear_btn = gr.Button("Clear")

            with gr.Column(scale=1):
                temperature = gr.Slider(0.3, 1.0, value=0.7, label="Creativity")

                gr.Markdown("### Quick Questions:")
                questions = [
                    "How much emergency fund do I need?",
                    "Best way to start investing?",
                    "How to reduce taxes?",
                    "Should I pay debt or invest?",
                    "How to create a budget?"
                ]

                for q in questions:
                    btn = gr.Button(q, size="sm")
                    btn.click(lambda x=q: (x, []), outputs=[msg, chatbot])

        send_btn.click(chat_response, [msg, chatbot, temperature], [msg, chatbot])
        msg.submit(chat_response, [msg, chatbot, temperature], [msg, chatbot])
        clear_btn.click(lambda: ([], ""), outputs=[chatbot, msg])

    with gr.Tab("üìà Investment Calculator"):
        with gr.Row():
            with gr.Column():
                principal = gr.Number(label="Initial Investment ($)", value=10000)
                rate = gr.Number(label="Annual Return (%)", value=7)
                years = gr.Number(label="Years", value=20)
                calc_btn = gr.Button("Calculate", variant="primary")

            with gr.Column():
                result = gr.Textbox(label="Results", lines=8)

        calc_btn.click(calculate_compound_interest, [principal, rate, years], result)

    with gr.Tab("üèñÔ∏è Retirement Planner"):
        with gr.Row():
            with gr.Column():
                current_age = gr.Number(label="Current Age", value=30)
                retirement_age = gr.Number(label="Retirement Age", value=65)
                monthly_savings = gr.Number(label="Monthly Savings ($)", value=500)
                annual_return = gr.Number(label="Expected Return (%)", value=7)
                retire_btn = gr.Button("Calculate Retirement", variant="primary")

            with gr.Column():
                retire_result = gr.Textbox(label="Retirement Plan", lines=8)

        retire_btn.click(retirement_calculator, [current_age, retirement_age, monthly_savings, annual_return], retire_result)

    with gr.Tab("üìö Financial Tips"):
        gr.Markdown("""
### üí° Key Financial Tips

**Emergency Fund:**
- Save 3-6 months of expenses
- Keep in high-yield savings account

**Investing Basics:**
- Start early, invest consistently
- Diversify with index funds
- Don't try to time the market

**Tax Strategies:**
- Maximize 401(k) contributions
- Consider Roth IRA
- Track deductible expenses

**Debt Management:**
- Pay high-interest debt first
- Consider debt consolidation
- Maintain good credit score

**Budget Rules:**
- 50% needs, 30% wants, 20% savings
- Track all expenses
- Automate savings
        """)

app.launch(share=True)

# Personal Finance Chatbot - Google Colab Ready
!pip install -q transformers torch gradio accelerate

import torch
import gradio as gr
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
import warnings
warnings.filterwarnings("ignore")

MODEL_NAME = "ibm-granite/granite-3.1-2b-instruct"

class FinanceChatbot:
    def __init__(self):
        print("Loading Granite 3.1-2B-Instruct...")

        self.tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME, trust_remote_code=True)
        self.model = AutoModelForCausalLM.from_pretrained(
            MODEL_NAME,
            torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
            device_map="auto" if torch.cuda.is_available() else None,
            trust_remote_code=True
        )

        self.generator = pipeline(
            "text-generation",
            model=self.model,
            tokenizer=self.tokenizer,
            # Removed the device argument as accelerate handles device placement
            # device=0 if torch.cuda.is_available() else -1
        )

        self.context = """You are a Personal Finance Assistant specializing in savings, taxes, and investments.
        Provide practical, actionable advice with specific examples. Always remind users to consult certified financial advisors."""

        print("Finance Chatbot ready!")

    def get_advice(self, question, history, temperature):
        try:
            # Build context from chat history
            chat_context = ""
            for user_msg, bot_msg in history[-3:]:
                chat_context += f"User: {user_msg}\nBot: {bot_msg}\n"

            prompt = f"<|user|>\n{self.context}\n\nContext: {chat_context}\nUser: {question}\n<|assistant|>\n"

            response = self.generator(
                prompt,
                max_length=512,
                temperature=temperature,
                top_p=0.9,
                do_sample=True,
                pad_token_id=self.tokenizer.eos_token_id,
                return_full_text=False
            )[0]['generated_text'].strip()

            response += "\n\nüí° *Please consult a certified financial advisor for personalized advice.*"
            return response

        except Exception as e:
            return f"Error: {str(e)}"

# Initialize chatbot
bot = FinanceChatbot()

def chat_response(message, history, temperature):
    response = bot.get_advice(message, history, temperature)
    history.append((message, response))
    return "", history

def calculate_compound_interest(principal, rate, years):
    if principal <= 0 or rate < 0 or years <= 0:
        return "Please enter valid numbers."

    final_amount = principal * (1 + rate/100) ** years
    interest = final_amount - principal

    return f"""
üí∞ Investment Results:
‚Ä¢ Initial: ${principal:,.2f}
‚Ä¢ Final: ${final_amount:,.2f}
‚Ä¢ Interest Earned: ${interest:,.2f}
‚Ä¢ Total Return: {(interest/principal)*100:.1f}%
"""

def retirement_calculator(current_age, retirement_age, monthly_savings, annual_return):
    if current_age >= retirement_age:
        return "Current age must be less than retirement age."

    years = retirement_age - current_age
    months = years * 12
    monthly_rate = annual_return / 100 / 12

    if monthly_rate > 0:
        total = monthly_savings * (((1 + monthly_rate) ** months - 1) / monthly_rate)
    else:
        total = monthly_savings * months

    monthly_income = (total * 0.04) / 12  # 4% rule

    return f"""
üèñÔ∏è Retirement Projection:
‚Ä¢ Years to save: {years}
‚Ä¢ Total at retirement: ${total:,.2f}
‚Ä¢ Monthly retirement income: ${monthly_income:,.2f}
"""

# Gradio Interface
with gr.Blocks(title="Personal Finance Chatbot") as app:
    gr.Markdown("# üí∞ Personal Finance Chatbot\n### Expert advice on Savings, Taxes & Investments")

    with gr.Tab("üí¨ Chat Assistant"):
        with gr.Row():
            with gr.Column(scale=3):
                chatbot = gr.Chatbot(height=400)
                msg = gr.Textbox(placeholder="Ask about savings, investments, taxes...", show_label=False)
                with gr.Row():
                    send_btn = gr.Button("Send", variant="primary")
                    clear_btn = gr.Button("Clear")

            with gr.Column(scale=1):
                temperature = gr.Slider(0.3, 1.0, value=0.7, label="Creativity")

                gr.Markdown("### Quick Questions:")
                questions = [
                    "How much emergency fund do I need?",
                    "Best way to start investing?",
                    "How to reduce taxes?",
                    "Should I pay debt or invest?",
                    "How to create a budget?"
                ]

                for q in questions:
                    btn = gr.Button(q, size="sm")
                    btn.click(lambda x=q: (x, []), outputs=[msg, chatbot])

        send_btn.click(chat_response, [msg, chatbot, temperature], [msg, chatbot])
        msg.submit(chat_response, [msg, chatbot, temperature], [msg, chatbot])
        clear_btn.click(lambda: ([], ""), outputs=[chatbot, msg])

    with gr.Tab("üìà Investment Calculator"):
        with gr.Row():
            with gr.Column():
                principal = gr.Number(label="Initial Investment ($)", value=10000)
                rate = gr.Number(label="Annual Return (%)", value=7)
                years = gr.Number(label="Years", value=20)
                calc_btn = gr.Button("Calculate", variant="primary")

            with gr.Column():
                result = gr.Textbox(label="Results", lines=8)

        calc_btn.click(calculate_compound_interest, [principal, rate, years], result)

    with gr.Tab("üèñÔ∏è Retirement Planner"):
        with gr.Row():
            with gr.Column():
                current_age = gr.Number(label="Current Age", value=30)
                retirement_age = gr.Number(label="Retirement Age", value=65)
                monthly_savings = gr.Number(label="Monthly Savings ($)", value=500)
                annual_return = gr.Number(label="Expected Return (%)", value=7)
                retire_btn = gr.Button("Calculate Retirement", variant="primary")

            with gr.Column():
                retire_result = gr.Textbox(label="Retirement Plan", lines=8)

        retire_btn.click(retirement_calculator, [current_age, retirement_age, monthly_savings, annual_return], retire_result)

    with gr.Tab("üìö Financial Tips"):
        gr.Markdown("""
### üí° Key Financial Tips

**Emergency Fund:**
- Save 3-6 months of expenses
- Keep in high-yield savings account

**Investing Basics:**
- Start early, invest consistently
- Diversify with index funds
- Don't try to time the market

**Tax Strategies:**
- Maximize 401(k) contributions
- Consider Roth IRA
- Track deductible expenses

**Debt Management:**
- Pay high-interest debt first
- Consider debt consolidation
- Maintain good credit score

**Budget Rules:**
- 50% needs, 30% wants, 20% savings
- Track all expenses
- Automate savings
        """)

app.launch(share=True)